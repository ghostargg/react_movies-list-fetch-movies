{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","imgUrl","title","description","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","FindMovie","query","setQuery","onFormSubmit","isLoading","hasError","setHasError","isMovieFound","addMovie","onSubmit","event","htmlFor","type","id","placeholder","value","onChange","target","cn","disabled","onClick","App","useState","setMovies","setIsLoading","setMovie","setIsMovieFound","handleFormReset","useCallback","movieToAdd","find","movieToCheck","prevMovies","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","response","Title","Plot","Poster","imdbID","foundMovie","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3963613d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    imgUrl, title, description, imdbUrl,\n  } = movie || {};\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ninterface FindMovieProps {\n  hasError: boolean,\n  isLoading: boolean,\n  query: string;\n  setQuery: (text: string) => void;\n  onFormSubmit: (event: React.FormEvent) => void;\n  setHasError: (value:boolean) => void;\n  isMovieFound: boolean,\n  movie: Movie | null,\n  addMovie: (movie: Movie | null) => void;\n}\n\nexport const FindMovie: React.FC<FindMovieProps> = ({\n  query,\n  setQuery,\n  onFormSubmit,\n  isLoading,\n  hasError,\n  setHasError,\n  isMovieFound,\n  movie,\n  addMovie,\n}) => {\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => onFormSubmit(event)}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              value={query}\n              onChange={(event) => {\n                setHasError(false);\n                setQuery(event.target.value);\n              }}\n              className={cn('input', {\n                'is-danger': hasError,\n              })}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!query}\n            >\n              {!movie ? 'Find a movie' : 'Search again'}\n            </button>\n          </div>\n\n          {isMovieFound && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addMovie(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isMovieFound, setIsMovieFound] = useState(false);\n\n  const handleFormReset = useCallback(() => {\n    setMovie(null);\n    setQuery('');\n    setIsMovieFound(false);\n    setHasError(false);\n  }, []);\n\n  const handleAddMovie = (movieToAdd: Movie | null) => {\n    if (movieToAdd) {\n      const isAlreadyAdded = movies\n        .find(movieToCheck => movieToCheck.imdbId === movieToAdd.imdbId);\n\n      if (!isAlreadyAdded) {\n        setMovies(prevMovies => [...prevMovies, movieToAdd]);\n      }\n\n      handleFormReset();\n    }\n  };\n\n  const handleFindMovie: React.FormEventHandler = (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(query)\n      .then(response => {\n        if ('imdbID' in response) {\n          const {\n            Title, Plot, Poster, imdbID,\n          } = response;\n\n          const foundMovie = {\n            title: Title,\n            description: Plot,\n            imgUrl: Poster !== 'N/A'\n              ? Poster\n              : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n            imdbId: imdbID,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n          };\n\n          setIsMovieFound(true);\n\n          setMovie(foundMovie);\n        } else {\n          setHasError(true);\n        }\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movie={movie}\n          addMovie={handleAddMovie}\n          isMovieFound={isMovieFound}\n          hasError={hasError}\n          setHasError={setHasError}\n          isLoading={isLoading}\n          query={query}\n          setQuery={setQuery}\n          onFormSubmit={handleFindMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=8f031f2e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}